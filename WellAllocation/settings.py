"""
Django settings for WellAllocation project.

Generated by 'django-admin startproject' using Django 3.2.7.

For more information on this file, see
https://docs.djangoproject.com/en/3.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

BOX_PATH = r"C:\Users\dsx\Box"
INPUT_DATA_PATH = Path(BOX_PATH) / "VICE Lab" / "RESEARCH" / "PROJECTS" / "Valley_Water" / "DATA" / "INPUT DATA"
CROP_DATA = INPUT_DATA_PATH / "vw_crop_crosswalks_vw_perspective.csv"
FIELD_DATA = INPUT_DATA_PATH / "vw_fields_liq.csv"
WELL_DATA = INPUT_DATA_PATH / "vw_wells_with_apns_and_service_areas.csv"
ET_DATA = INPUT_DATA_PATH / "vw_et_and_precip_2018_annual.csv"
PRODUCTION_DATA_FILES = (
                            INPUT_DATA_PATH / "vw_well_billing_semi.csv",
                            INPUT_DATA_PATH / "vw_well_billing_annual.csv",
                            INPUT_DATA_PATH / "vw_well_billing_monthly.csv",
                         )
PIPE_FILE = INPUT_DATA_PATH / "vw_well_field_near_table.csv"


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-kr)e9&!gfy3kz*j5e2gx=sm9k3^cwy&6x4z-b6=co9n*hd0n91'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'allocate'
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'WellAllocation.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates']
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'WellAllocation.wsgi.application'


# Database
# https://docs.djangoproject.com/en/3.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'C:/Users/dsx/Downloads/WellAllocation_db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/3.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/3.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_L10N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.2/howto/static-files/

STATIC_URL = '/static/'

# Default primary key field type
# https://docs.djangoproject.com/en/3.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'


log_handlers = ['console', 'file_debug']
django_request_handlers = log_handlers
LOG_FOLDER = BASE_DIR

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '%(levelname)s : %(asctime)s : %(module)s : %(process)d : %(thread)d : %(message)s'
        },
        'simple': {
            'format': '%(levelname)s:%(name)s: %(message)s'
        },
    },
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
            'level': 'INFO' if not DEBUG else 'DEBUG',
        },
        'file_debug': {
            'level': 'DEBUG',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'debug.log') if DEBUG else os.path.join(LOG_FOLDER, "waterspout_debug.log"),
            'formatter': 'verbose'
        },
        'file_error': {
            'level': 'WARNING',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'warnings.log') if DEBUG else os.path.join(LOG_FOLDER, "waterspout_error.log"),
            'formatter': 'verbose'
        },
        'file_model_run_processor': {
            'level': 'INFO',
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'waterspout_process_runs.log') if DEBUG else os.path.join(LOG_FOLDER,
                                                                                          "waterspout_process_runs.log"),
            'formatter': 'verbose'
        },
        'email_warn': {
            'level': "WARNING",
            'class': "django.utils.log.AdminEmailHandler",
        },
        'email_error': {
            'level': "ERROR",
            'class': "django.utils.log.AdminEmailHandler"
        },
    },
    'loggers': {
        'django': {
            # don't want warnings from django.request via email, which include 400-series errors like 401 and 404.
            'handlers': django_request_handlers,
            'level': "ERROR",
        },
        'allocate': {
            'handlers': log_handlers,
            'level': 'DEBUG'
        },

    },
}